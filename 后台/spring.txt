1、核心：控制反转（ioc：inversion of control 对象的创建权反转控制给spring，目的解耦合） 面向切面（aop） 分层的javaee/eefull-stack（一站式）轻型开源框架
2、web三层架构
    web
    service
    dao
	
3、引入
        log4j.properties
        applicationContext.xml
4、ioc、di（依赖注入 degger2）

5、ApplicationContext获取
		ClassPathXmlApplicationContext :加载类路径下 Spring 的配置文件.
		FileSystemXmlApplicationContext :加载本地磁盘下 Spring 的配置文件
		
6、<bean>
     id
	 scope: singleton  单例
			prototype  多例
	 生命周期
			init-method
			destroy-method
			
7、生成bean
    1.无参构造 
	2.静态工厂 bean中配置 factory-method
    2.实例化工厂 
	
8、bean属性注入
	1.构造方法  <constructor-arg name="name"  value="fk"/>
	2.set       <property name="name" value="fk"/>
	
9、属性注入
	1.对象类型注入
				 <property name="name" value="fk"/>
				 <!-- ref 属性：引用另一个 bean 的 id 或 name -->
				 <property name=" "   ref="fk"/>
	2.名称控件p
				* 普通属性:      p:属性名称=””       p:name = "fk"
				* 对象类型属性:  p:属性名称-ref=””   p:name-ref="fk"
	3.SpEl
			<property name="name" value="#{'fk'}"/>
			<property name="name" value="#{另一个bean的id或者name}"/>
			<property name="name" value="#{name.sex}"/>
	4.list
				<property name="arrs">
					<list>
						<value>1</value>
						<value>2</value>
					</list>
				</property>
	5.map
			<property name="map">
				<map>
					<entry key="aaa" value="111"/>
					<entry key="bbb" value="222"/>
					<entry key="ccc" value="333"/>
				</map>
			</property>
	6.properties
				<property name="properties">
					<props>
						<prop key="username">root</prop>
						<prop key="password">123456</prop>
					</props>
				</property>	

10、分配置文件开发
					1.加载多个文件 
						new ClassPathXmlApplicationContext("applicationContext.xml","applicationContext2.xml");
					2.在配置文件中
						<import resource="applicationContext2.xml"/>

11.配置spring 一个工程只能有一个spring的工厂
			1.配置监听器:
					<listener>
						<listener-class>org.springframework.web.context.ContextLoaderListener</listener-
						class>
					</listener>
					<context-param>
						<param-name>contextConfigLocation</param-name>
						<param-value>classpath:applicationContext.xml</param-value>
					</context-param>
			2.配置action	  
			WebApplicationContext  applicationContext
				=WebApplicationContextUtils.getWebApplicationContext(ServletActionContext.getServletContext());
			
12.注解扫描	
           <!-- Spring 的注解开发:组件扫描(类上注解: 可以直接使用属性注入的注解) -->
		   1.<context:component-scan base-package="包"/>
           2.@Component(value="nameDao")	
		   
13.常用类注解
		   1.@Controller  :	 WEB  层
           2.@Service : 	 业务层
           3.@Repository  :	 持久层 dao
14.属性注入注解（可以不用提供set方式）
				1.@Value :用于注入普通类型.
				2.@Autowired :自动装配:
					*  默认按类型进行装配.
					
				*  按名称注入:
					3.@Qualifier:
						*  强制使用名称注入.
					4.@Resource（name=“fuck”） 
						*  相当于:@Autowired 和@Qualifier 一起使用（自动装配、强制名称注入）
15.bean的注解范围
				1.@Scope
						singleton 单例
						prototype 多例
				2.@PostConstruct   init-method
				3.@PreDestory      destroy-method

16.aop面向切面编程
		aop可以进行权限校验、日志记录、性能监控、事务控制
		
17.spring的aop（了解）
	    两种代理机制
				1.jdk动态代理
				2.cglib 实现MethodInterceptor

18.aspectJ的AOP开发（重点）
		1.术语
				连接点
				切入点
				通知/增强；前置、后置、环绕、异常抛出、最终
				引介
				目标对象
				织入
				代理
				切面

19.切入点表达式
        execution([可见性] 返回类型 [声明类型].方法名(参数) [异常])
		    *   匹配所有字符
			..  一般用于匹配多个包，多个参数
			+   表示类及其子类
			
		步骤：
            1.编写一个切面类 Demo 中有个 before方法
			2.配置切面类
			    <bean id="demo" class="com.yoyiyi.demo.Demo"></bean>
			3.aop配置
				<aop:config>
					<!--那些方法需要增强-->
					<aop pointcut expression="execution(*com.yoyiyi.demo.Demo1.save(..) id="pointcut1")"
					<!--配置切面-->
					<aop:aspect ref="demo">
						<aop:before method="before" pointcut-ref="pointcut1"/>
					</aop:aspect>
				</aop:config>	

                前置、后置、环绕、异常抛出、最终				
				before、after-returing、around、after-throwing、after
					 
20.例子（比如每个保存方法都需要admin权限配置）
    1.xml（见19）
    2.注解	
			1.开启aop注解自动代理<aop:aspectj-autopeoxy>
			2.AOP注解
					@Aspect    切面类注解
					
					通知类型
							@Before				前置
							@AfterReturing		后置
							@Around				环绕
							@After				最终
							@AfterThrowing		异常抛出
					@Pointcut   切入点注解

21.spring的jdbc模板
		jdbc：JdbcTemplate
		Hibernate   HibernateTemplate
		IBatis		SqlMapClientTemplate;
		JPA         JPATemplate
		
22.spring管理连接池
                  1.<!-- 配置 Spring 的内置连接池 -->
					<bean  id="dataSource"
					class="org.springframework.jdbc.datasource.DriverManagerDataSource">
						<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
						<property name="url" value="jdbc:mysql:///数据库名称"/>
						<property name="username" value="root"/>
						<property name="password" value="123"/>
					</bean>
					
				   2.<!-- 配置 JDBC 模板 -->
					<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
						<property name="dataSource" ref="dataSource"/>
					</bean>
								@Resource（name="jdbcTemplate")
								
								jdbcTemplate.update();
				    
				   3.c3p0连接池
								<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
					 
                   4.dbcp连接池
								<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">

23.抽取属性db文件	db.properties
				jdbc.driverClass=com.mysql.jdbc.Driver
				jdbc.url=jdbc:mysql:///....
				jdbc.username=root
				jdbc.password=123456	
				
				引入：
					1.<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
							<property name="location" value="classpath:jdbc.properties"/>
					   </bean>
					   
					2.<context:property-placeholder location="classpath:jdbc.properties"/>
					 
24.事务
       1.特性
				1.原子
				2.一致
				3.隔离
				4.持久
	   2.安全问题
				1.脏读
				2.不可重复读
				4.虚/幻读
	   3.解决 事务隔离等级
				1.未提交读
				2.已提交读
				3.可重复读
				4.串行化
				
25.spring 进行事务管理
			org.springframework.jdbc.datasource.DataSourceTransactionManager  
			   使用 Spring的JDBC或iBatis  进行持久化数据时使用
			org.springframework.orm.hibernate3.HibernateTransactionManager 
				使用 Hibernate			  进行持久化数据时使用
					 
26.spring事务

          事务传播行为
						PROPAGATION_REQUIRED 支持当前事务，如果不存在 就新建一个(默认)
						PROPAGATION_REQUIRES_NEW  如果有事务存在，挂起当前事务，创建一个新的事务
						PROPAGATION_NESTED 如果当前事务存在，则嵌套事务执行

           一：手动编写
					1.<!-- 配置事务管理器 -->
						<bean  id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
							<property name="dataSource" ref="dataSource"/>
						</bean>		
					2.<!-- 配置事务管理模板 -->
						<bean  id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
							<property name="transactionManager" ref="transactionManager"/>
						</bean>
					3.<!-- 配置业务层的类 -->
						<bean  id="demoService" class="">
							<property name="demoDao" ref="demoDao"/>
							<!-- 注入事务管理模板 -->
							<property name="transactionTemplate" ref="transactionTemplate"/>
						</bean>		 
					4.编写
						transactionTemplate.execute（....）
		   二：xml声明事务管理（重点）
					1.<!-- 事务管理器 -->
						<bean  id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
							<property name="dataSource" ref="dataSource"/>
						</bean>
					2.<!-- 配置事务的增强 -->
					   <tx:advice id="txAdvice" transaction-manager="transactionManager">
					        <tx:attributes>
									<!--
									isolation="DEFAULT" 隔离级别
									propagation="REQUIRED" 传播行为
									read-only="false"  只读
									timeout="-1"  过期时间
									rollback-for="" -Exception
									no-rollback-for="" +Exception
									-->
									<tx:method name="transfer" propagation="REQUIRED"/>
						    </tx:attributes>
						</tx:advice>
					3.配置 aop 
					  <aop:config>
							<aop:pointcut  expression="execution(*
							com.yoyiyi.transfer(..))" id="pointcut1"/>
							<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1"/>
					 </aop:config>
		   
		   三：注解方式（重点）
					1.<!-- 事务管理器 -->
						<bean  id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
							<property name="dataSource" ref="dataSource"/>
						</bean>
					2.<!-- 配置事务的增强 -->
		                <tx:advice id="txAdvice" transaction-manager="transactionManager">
					3. 在使用事务的类上添加一个注解：@Transactional

27.ssh 带Hibernate
    1.struts	
	            1.web.xml
					<!-- 配置 Struts2 的核心过滤器 -->
					<filter>
						<filter-name>
							struts2
						</filter-name>
						<filter-class>
							org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
						</filter-class>
					</filter>
					<filter-mapping>
						<filter-name>
							struts2
						</filter-name>
						<url-pattern>
			                /*
						</url-pattern>
					</filter-mapping>
				2.struts.xml
	2.hibernate
				1.hibernate.cfg.xml
	3.spring
				1.web.xml
				<!-- 配置 Spring 的核心监听器 -->
					<listener>
						<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
					</listener>
					<context-param>
						<param-name>contextConfigLocation</param-name>
						<param-value>classpath:applicationContext.xml</param-value>
					</context-param>
				2.applicationContext.xml
				3.log4j.properties
				
28.ssh 不带Hibernate配置文件 

29.struts2和spring整合
                      1.action类由struts2自己维护
					  2.action类由spring（推荐使用这种方式）
	
				
					 
					 


